<?php
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class RetVal {
  const SUCCESS = 1;
  const FAILED = 2;
  static public $__names = array(
    1 => 'SUCCESS',
    2 => 'FAILED',
  );
}

final class TaskType {
  const TIME = 1;
  const EVENT = 2;
  static public $__names = array(
    1 => 'TIME',
    2 => 'EVENT',
  );
}

final class TaskAction {
  const ONLINE = 1;
  const OFFLINE = 2;
  const PAUSE = 3;
  const RESUME = 4;
  const REMOVE = 5;
  const EXECUTE = 6;
  static public $__names = array(
    1 => 'ONLINE',
    2 => 'OFFLINE',
    3 => 'PAUSE',
    4 => 'RESUME',
    5 => 'REMOVE',
    6 => 'EXECUTE',
  );
}

class TaskInfo {
  static $_TSPEC;

  /**
   * @var string
   */
  public $taskId = null;
  /**
   * @var int
   */
  public $taskType = null;
  /**
   * @var string
   */
  public $cmdLine = null;
  /**
   * @var string
   */
  public $trigerTime = null;
  /**
   * @var string
   */
  public $retValue = null;
  /**
   * @var int
   */
  public $waitTime = null;
  /**
   * @var int
   */
  public $execTimeout = null;
  /**
   * @var int
   */
  public $retryCounter = null;
  /**
   * @var string
   */
  public $account = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'taskId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'taskType',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'cmdLine',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'trigerTime',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'retValue',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'waitTime',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'execTimeout',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'retryCounter',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'account',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['taskId'])) {
        $this->taskId = $vals['taskId'];
      }
      if (isset($vals['taskType'])) {
        $this->taskType = $vals['taskType'];
      }
      if (isset($vals['cmdLine'])) {
        $this->cmdLine = $vals['cmdLine'];
      }
      if (isset($vals['trigerTime'])) {
        $this->trigerTime = $vals['trigerTime'];
      }
      if (isset($vals['retValue'])) {
        $this->retValue = $vals['retValue'];
      }
      if (isset($vals['waitTime'])) {
        $this->waitTime = $vals['waitTime'];
      }
      if (isset($vals['execTimeout'])) {
        $this->execTimeout = $vals['execTimeout'];
      }
      if (isset($vals['retryCounter'])) {
        $this->retryCounter = $vals['retryCounter'];
      }
      if (isset($vals['account'])) {
        $this->account = $vals['account'];
      }
    }
  }

  public function getName() {
    return 'TaskInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->taskId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->taskType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cmdLine);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->trigerTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->retValue);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->waitTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->execTimeout);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retryCounter);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->account);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TaskInfo');
    if ($this->taskId !== null) {
      $xfer += $output->writeFieldBegin('taskId', TType::STRING, 1);
      $xfer += $output->writeString($this->taskId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->taskType !== null) {
      $xfer += $output->writeFieldBegin('taskType', TType::I32, 2);
      $xfer += $output->writeI32($this->taskType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cmdLine !== null) {
      $xfer += $output->writeFieldBegin('cmdLine', TType::STRING, 3);
      $xfer += $output->writeString($this->cmdLine);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->trigerTime !== null) {
      $xfer += $output->writeFieldBegin('trigerTime', TType::STRING, 4);
      $xfer += $output->writeString($this->trigerTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->retValue !== null) {
      $xfer += $output->writeFieldBegin('retValue', TType::STRING, 5);
      $xfer += $output->writeString($this->retValue);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->waitTime !== null) {
      $xfer += $output->writeFieldBegin('waitTime', TType::I32, 6);
      $xfer += $output->writeI32($this->waitTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->execTimeout !== null) {
      $xfer += $output->writeFieldBegin('execTimeout', TType::I32, 7);
      $xfer += $output->writeI32($this->execTimeout);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->retryCounter !== null) {
      $xfer += $output->writeFieldBegin('retryCounter', TType::I32, 8);
      $xfer += $output->writeI32($this->retryCounter);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->account !== null) {
      $xfer += $output->writeFieldBegin('account', TType::STRING, 9);
      $xfer += $output->writeString($this->account);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TaskEntity {
  static $_TSPEC;

  /**
   * @var \TaskInfo
   */
  public $taskInfo = null;
  /**
   * @var int
   */
  public $action = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'taskInfo',
          'type' => TType::STRUCT,
          'class' => '\TaskInfo',
          ),
        2 => array(
          'var' => 'action',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['taskInfo'])) {
        $this->taskInfo = $vals['taskInfo'];
      }
      if (isset($vals['action'])) {
        $this->action = $vals['action'];
      }
    }
  }

  public function getName() {
    return 'TaskEntity';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->taskInfo = new \TaskInfo();
            $xfer += $this->taskInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->action);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TaskEntity');
    if ($this->taskInfo !== null) {
      if (!is_object($this->taskInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('taskInfo', TType::STRUCT, 1);
      $xfer += $this->taskInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->action !== null) {
      $xfer += $output->writeFieldBegin('action', TType::I32, 2);
      $xfer += $output->writeI32($this->action);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


