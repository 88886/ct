// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package cttask

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type CTTaskService interface {
	// Parameters:
	//  - Task
	AddTask(task *TaskEntity) (r RetVal, err error)
	// Parameters:
	//  - Task
	ModifyTask(task *TaskEntity) (r RetVal, err error)
	// Parameters:
	//  - Task
	Execute(task *TaskEntity) (r RetVal, err error)
}

type CTTaskServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewCTTaskServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CTTaskServiceClient {
	return &CTTaskServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewCTTaskServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CTTaskServiceClient {
	return &CTTaskServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - Task
func (p *CTTaskServiceClient) AddTask(task *TaskEntity) (r RetVal, err error) {
	if err = p.sendAddTask(task); err != nil {
		return
	}
	return p.recvAddTask()
}

func (p *CTTaskServiceClient) sendAddTask(task *TaskEntity) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("AddTask", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CTTaskServiceAddTaskArgs{
		Task: task,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *CTTaskServiceClient) recvAddTask() (value RetVal, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "AddTask" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "AddTask failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "AddTask failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "AddTask failed: invalid message type")
		return
	}
	result := CTTaskServiceAddTaskResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Task
func (p *CTTaskServiceClient) ModifyTask(task *TaskEntity) (r RetVal, err error) {
	if err = p.sendModifyTask(task); err != nil {
		return
	}
	return p.recvModifyTask()
}

func (p *CTTaskServiceClient) sendModifyTask(task *TaskEntity) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("ModifyTask", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CTTaskServiceModifyTaskArgs{
		Task: task,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *CTTaskServiceClient) recvModifyTask() (value RetVal, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "ModifyTask" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "ModifyTask failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ModifyTask failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "ModifyTask failed: invalid message type")
		return
	}
	result := CTTaskServiceModifyTaskResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Task
func (p *CTTaskServiceClient) Execute(task *TaskEntity) (r RetVal, err error) {
	if err = p.sendExecute(task); err != nil {
		return
	}
	return p.recvExecute()
}

func (p *CTTaskServiceClient) sendExecute(task *TaskEntity) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("Execute", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CTTaskServiceExecuteArgs{
		Task: task,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *CTTaskServiceClient) recvExecute() (value RetVal, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "Execute" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "Execute failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "Execute failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error5 error
		error5, err = error4.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error5
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "Execute failed: invalid message type")
		return
	}
	result := CTTaskServiceExecuteResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type CTTaskServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      CTTaskService
}

func (p *CTTaskServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *CTTaskServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *CTTaskServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewCTTaskServiceProcessor(handler CTTaskService) *CTTaskServiceProcessor {

	self6 := &CTTaskServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self6.processorMap["AddTask"] = &cTTaskServiceProcessorAddTask{handler: handler}
	self6.processorMap["ModifyTask"] = &cTTaskServiceProcessorModifyTask{handler: handler}
	self6.processorMap["Execute"] = &cTTaskServiceProcessorExecute{handler: handler}
	return self6
}

func (p *CTTaskServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x7 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x7.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x7

}

type cTTaskServiceProcessorAddTask struct {
	handler CTTaskService
}

func (p *cTTaskServiceProcessorAddTask) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CTTaskServiceAddTaskArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AddTask", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CTTaskServiceAddTaskResult{}
	var retval RetVal
	var err2 error
	if retval, err2 = p.handler.AddTask(args.Task); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddTask: "+err2.Error())
		oprot.WriteMessageBegin("AddTask", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("AddTask", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cTTaskServiceProcessorModifyTask struct {
	handler CTTaskService
}

func (p *cTTaskServiceProcessorModifyTask) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CTTaskServiceModifyTaskArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ModifyTask", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CTTaskServiceModifyTaskResult{}
	var retval RetVal
	var err2 error
	if retval, err2 = p.handler.ModifyTask(args.Task); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ModifyTask: "+err2.Error())
		oprot.WriteMessageBegin("ModifyTask", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("ModifyTask", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cTTaskServiceProcessorExecute struct {
	handler CTTaskService
}

func (p *cTTaskServiceProcessorExecute) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CTTaskServiceExecuteArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Execute", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CTTaskServiceExecuteResult{}
	var retval RetVal
	var err2 error
	if retval, err2 = p.handler.Execute(args.Task); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Execute: "+err2.Error())
		oprot.WriteMessageBegin("Execute", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("Execute", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Task
type CTTaskServiceAddTaskArgs struct {
	Task *TaskEntity `thrift:"task,1" json:"task"`
}

func NewCTTaskServiceAddTaskArgs() *CTTaskServiceAddTaskArgs {
	return &CTTaskServiceAddTaskArgs{}
}

var CTTaskServiceAddTaskArgs_Task_DEFAULT *TaskEntity

func (p *CTTaskServiceAddTaskArgs) GetTask() *TaskEntity {
	if !p.IsSetTask() {
		return CTTaskServiceAddTaskArgs_Task_DEFAULT
	}
	return p.Task
}
func (p *CTTaskServiceAddTaskArgs) IsSetTask() bool {
	return p.Task != nil
}

func (p *CTTaskServiceAddTaskArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CTTaskServiceAddTaskArgs) readField1(iprot thrift.TProtocol) error {
	p.Task = &TaskEntity{}
	if err := p.Task.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Task), err)
	}
	return nil
}

func (p *CTTaskServiceAddTaskArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AddTask_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CTTaskServiceAddTaskArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("task", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:task: ", p), err)
	}
	if err := p.Task.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Task), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:task: ", p), err)
	}
	return err
}

func (p *CTTaskServiceAddTaskArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CTTaskServiceAddTaskArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CTTaskServiceAddTaskResult struct {
	Success *RetVal `thrift:"success,0" json:"success,omitempty"`
}

func NewCTTaskServiceAddTaskResult() *CTTaskServiceAddTaskResult {
	return &CTTaskServiceAddTaskResult{}
}

var CTTaskServiceAddTaskResult_Success_DEFAULT RetVal

func (p *CTTaskServiceAddTaskResult) GetSuccess() RetVal {
	if !p.IsSetSuccess() {
		return CTTaskServiceAddTaskResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *CTTaskServiceAddTaskResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CTTaskServiceAddTaskResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CTTaskServiceAddTaskResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := RetVal(v)
		p.Success = &temp
	}
	return nil
}

func (p *CTTaskServiceAddTaskResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AddTask_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CTTaskServiceAddTaskResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *CTTaskServiceAddTaskResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CTTaskServiceAddTaskResult(%+v)", *p)
}

// Attributes:
//  - Task
type CTTaskServiceModifyTaskArgs struct {
	Task *TaskEntity `thrift:"task,1" json:"task"`
}

func NewCTTaskServiceModifyTaskArgs() *CTTaskServiceModifyTaskArgs {
	return &CTTaskServiceModifyTaskArgs{}
}

var CTTaskServiceModifyTaskArgs_Task_DEFAULT *TaskEntity

func (p *CTTaskServiceModifyTaskArgs) GetTask() *TaskEntity {
	if !p.IsSetTask() {
		return CTTaskServiceModifyTaskArgs_Task_DEFAULT
	}
	return p.Task
}
func (p *CTTaskServiceModifyTaskArgs) IsSetTask() bool {
	return p.Task != nil
}

func (p *CTTaskServiceModifyTaskArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CTTaskServiceModifyTaskArgs) readField1(iprot thrift.TProtocol) error {
	p.Task = &TaskEntity{}
	if err := p.Task.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Task), err)
	}
	return nil
}

func (p *CTTaskServiceModifyTaskArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ModifyTask_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CTTaskServiceModifyTaskArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("task", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:task: ", p), err)
	}
	if err := p.Task.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Task), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:task: ", p), err)
	}
	return err
}

func (p *CTTaskServiceModifyTaskArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CTTaskServiceModifyTaskArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CTTaskServiceModifyTaskResult struct {
	Success *RetVal `thrift:"success,0" json:"success,omitempty"`
}

func NewCTTaskServiceModifyTaskResult() *CTTaskServiceModifyTaskResult {
	return &CTTaskServiceModifyTaskResult{}
}

var CTTaskServiceModifyTaskResult_Success_DEFAULT RetVal

func (p *CTTaskServiceModifyTaskResult) GetSuccess() RetVal {
	if !p.IsSetSuccess() {
		return CTTaskServiceModifyTaskResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *CTTaskServiceModifyTaskResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CTTaskServiceModifyTaskResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CTTaskServiceModifyTaskResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := RetVal(v)
		p.Success = &temp
	}
	return nil
}

func (p *CTTaskServiceModifyTaskResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ModifyTask_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CTTaskServiceModifyTaskResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *CTTaskServiceModifyTaskResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CTTaskServiceModifyTaskResult(%+v)", *p)
}

// Attributes:
//  - Task
type CTTaskServiceExecuteArgs struct {
	Task *TaskEntity `thrift:"task,1" json:"task"`
}

func NewCTTaskServiceExecuteArgs() *CTTaskServiceExecuteArgs {
	return &CTTaskServiceExecuteArgs{}
}

var CTTaskServiceExecuteArgs_Task_DEFAULT *TaskEntity

func (p *CTTaskServiceExecuteArgs) GetTask() *TaskEntity {
	if !p.IsSetTask() {
		return CTTaskServiceExecuteArgs_Task_DEFAULT
	}
	return p.Task
}
func (p *CTTaskServiceExecuteArgs) IsSetTask() bool {
	return p.Task != nil
}

func (p *CTTaskServiceExecuteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CTTaskServiceExecuteArgs) readField1(iprot thrift.TProtocol) error {
	p.Task = &TaskEntity{}
	if err := p.Task.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Task), err)
	}
	return nil
}

func (p *CTTaskServiceExecuteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Execute_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CTTaskServiceExecuteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("task", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:task: ", p), err)
	}
	if err := p.Task.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Task), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:task: ", p), err)
	}
	return err
}

func (p *CTTaskServiceExecuteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CTTaskServiceExecuteArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CTTaskServiceExecuteResult struct {
	Success *RetVal `thrift:"success,0" json:"success,omitempty"`
}

func NewCTTaskServiceExecuteResult() *CTTaskServiceExecuteResult {
	return &CTTaskServiceExecuteResult{}
}

var CTTaskServiceExecuteResult_Success_DEFAULT RetVal

func (p *CTTaskServiceExecuteResult) GetSuccess() RetVal {
	if !p.IsSetSuccess() {
		return CTTaskServiceExecuteResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *CTTaskServiceExecuteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CTTaskServiceExecuteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CTTaskServiceExecuteResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := RetVal(v)
		p.Success = &temp
	}
	return nil
}

func (p *CTTaskServiceExecuteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Execute_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CTTaskServiceExecuteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *CTTaskServiceExecuteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CTTaskServiceExecuteResult(%+v)", *p)
}
